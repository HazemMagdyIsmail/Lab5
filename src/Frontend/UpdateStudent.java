/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.Database;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import Backend.*;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author patrick
 */
public class UpdateStudent extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(UpdateStudent.class.getName());

    /**
     * Creates new form UpdateStudent
     */
    private Database DB;
    private ArrayList<Student> students = new ArrayList<>();
    private MainFrame parent;

    public UpdateStudent(Database db, MainFrame parent) {
        this.DB = db;
        this.parent = parent;

        initComponents();
         searchStudent.setColumnSelectionAllowed(false);  
// Prevent column selection
//searchStudent.setCellSelectionEnabled(false); 
searchStudent.setDefaultEditor(Object.class, null);
    searchStudent.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);  // Single row selection
    ((DefaultTableModel) searchStudent.getModel()).setRowCount(0);  // Clear dummy rows
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchStudent = new javax.swing.JTable();
        updatebtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        search = new javax.swing.JButton();
        searchID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        updID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        updName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        updDep = new javax.swing.JTextField();
        updAge = new javax.swing.JTextField();
        updGpa = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("enter Student(ID)");

        searchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNameActionPerformed(evt);
            }
        });

        searchStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student(Id)", "Name", "Age", "Gender", "Department", "Gpa"
            }
        ));
        searchStudent.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(searchStudent);
        searchStudent.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        searchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIDActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter Name");

        jLabel4.setText("Gpa");

        updID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updIDActionPerformed(evt);
            }
        });

        jLabel5.setText("Name");

        jLabel6.setText("Student ID");

        jLabel7.setText("Department");

        jLabel8.setText("Age");

        updAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updAgeActionPerformed(evt);
            }
        });

        updGpa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updGpaActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(search)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updAge, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updDep, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updGpa, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deletebtn)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatebtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(459, 459, 459)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(search)
                            .addComponent(searchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel2)))
                .addGap(36, 36, 36)
                .addComponent(deletebtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(updID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(updAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(updDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(updGpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updatebtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchNameActionPerformed
    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
       
        int selectedRow = searchStudent.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to update.");
            return;
        }
         Object value = searchStudent.getValueAt(selectedRow, 0);
  if (value == null || value.toString().trim().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Selected row is invalid (no data). Please search and select a valid student.");
      return;
  }
        int studentId = (Integer) searchStudent.getValueAt(selectedRow, 0); 
        Student s = DB.searchById(studentId);
        if (s == null) {
            JOptionPane.showMessageDialog(this, "Student not found.");
            return;
        }
        String name = s.getName();
        int age = s.getAge();
        int id = s.getStudentID();
        String department = s.getDepartment();
        double gpa = s.getGpa();

//updateId
        if (!updID.getText().isEmpty()) {
            try {
                id = Integer.parseInt(updID.getText());
                if (id < 0) {
                    JOptionPane.showMessageDialog(this, "Error: Invalid ID (must be non-negative).");
                    return;
                }
                if (DB.contains(id) && id != s.getStudentID()) {
                    JOptionPane.showMessageDialog(this, "ID already exists");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error Invalid id(must be a number)");
                return;
            }
        }
        if (!updName.getText().isEmpty()) {
            if (!updName.getText().matches("^[A-Za-z]{3,}$")) {
                JOptionPane.showMessageDialog(this, "Error: Invalid Name(at least 3 letters, no numbers).");
                return;
            }
            name = updName.getText();
        }
        if (!updAge.getText().isEmpty()) {
            try {

                age = Integer.parseInt(updAge.getText());

                if (age > 25 || age < 17) {

                    JOptionPane.showMessageDialog(this, "Error Invalid age");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error Invalid age (must be a number).");
                return;
            }
        }
        if (!updDep.getText().isEmpty()) {
            if (!updDep.getText().matches("^[A-Za-z]{3,}$")) {
                JOptionPane.showMessageDialog(this, "Error: Invalid Department");
                return;
            }
            department = updDep.getText();

        }
        if (!updGpa.getText().isEmpty()) {
            try {

                gpa = Double.parseDouble(updGpa.getText());
                if (gpa > 4 || gpa < 0) {
                    JOptionPane.showMessageDialog(this, "Error Invalid Gpa (must be between 0 and 4).");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error Invalid id (must be a number).");
                return;
            }
        }
        try {

            DB.updateRecord(id, name, age, department, gpa, studentId);
            JOptionPane.showMessageDialog(this, "Student updated successfully.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UpdateStudent.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error updating student: File not found.");
        }


    }//GEN-LAST:event_updatebtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = searchStudent.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.");
            return;
        }
         Object value = searchStudent.getValueAt(selectedRow, 0);
  if (value == null || value.toString().trim().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Selected row is invalid (no data). Please search and select a valid student.");
      return;
  }
        int studentId = (Integer) searchStudent.getValueAt(selectedRow, 0);

        Student s = DB.searchById(studentId);
        if (s == null) {
            JOptionPane.showMessageDialog(this, "Student not found.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this student?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        try {
            DB.deleteRecord(s.getStudentID());
            JOptionPane.showMessageDialog(this, "Student deleted successfully.");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(UpdateStudent.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error deleting student: File not found.");

        }

    }//GEN-LAST:event_deletebtnActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel m = (DefaultTableModel) searchStudent.getModel();
        m.setRowCount(0);  // Clear previous results

        if (!searchID.getText().isEmpty()) {
            try{
            int SearchID = Integer.parseInt(searchID.getText().trim());
            Student s = DB.searchById(SearchID);
            if(s !=null){
            m.addRow(new Object[]{s.getStudentID(), s.getName(), s.getAge(), s.getGender(), s.getDepartment(), s.getGpa()});
        } else  {
                                    JOptionPane.showMessageDialog(this, "No student found with that ID.");

            }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid ID: Must be a number.");
            }
        }else if(!searchName.getText().isEmpty()){
            students = DB.searchByName(searchName.getText().trim());
             if (students.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No students found with that name.");
            } else {
            for (int i = 0; i < students.size(); i++) {
                Student s = students.get(i);
                m.addRow(new Object[]{s.getStudentID(), s.getName(), s.getAge(), s.getGender(), s.getDepartment(), s.getGpa()});

            }
        }
        }else{
        JOptionPane.showMessageDialog(this, "Please enter an ID or Name to search.");}

    }//GEN-LAST:event_searchActionPerformed

    private void searchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchIDActionPerformed

    private void updIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updIDActionPerformed

    private void updAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updAgeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updGpaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updGpaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updGpaActionPerformed
  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchID;
    private javax.swing.JTextField searchName;
    private javax.swing.JTable searchStudent;
    private javax.swing.JTextField updAge;
    private javax.swing.JTextField updDep;
    private javax.swing.JTextField updGpa;
    private javax.swing.JTextField updID;
    private javax.swing.JTextField updName;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
}